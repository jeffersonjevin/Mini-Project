import random
import time
import tkinter as tk
from tkinter import messagebox

# List of sample sentences for the typing test
sample_sentences = [
    "The quick brown fox jumps over the lazy dog",
    "Python is a powerful and easy-to-learn programming language",
    "Typing speed can be improved with regular practice",
    "The weather today is sunny and warm",
    "Efficiency is doing things right; effectiveness is doing the right things",
    "Artificial intelligence is transforming various industries",
    "Practice makes perfect, and repetition is the key to improvement",
    "Data science is an interdisciplinary field that uses scientific methods",
    "Good things come to those who wait, but better things come to those who hustle"
]

# Function to calculate words per minute (WPM) based on time taken and words typed
def calculate_wpm(start_time, end_time, typed_text):
    # Calculate the time taken to type (in seconds)
    time_taken = end_time - start_time
    
    # Count the number of words typed by splitting the text by spaces
    word_count = len(typed_text.split())
    
    # Calculate words per minute (WPM)
    wpm = (word_count / time_taken) * 60
    return time_taken, wpm

# Function to check the accuracy and count the errors (incorrect, missing, and extra words)
def check_accuracy_and_errors(original_text, typed_text):
    original_words = original_text.split()  # Split the original sentence into words
    typed_words = typed_text.split()  # Split the typed sentence into words

    # Initialize counters for incorrect words, missing words, and extra words
    incorrect_words = 0
    missing_words = []
    wrong_words = []
    extra_words = []

    # Compare words in both original and typed texts to find errors
    for i, word in enumerate(original_words):
        if i >= len(typed_words) or word != typed_words[i]:
            incorrect_words += 1
            if i < len(typed_words):
                wrong_words.append(typed_words[i])  # Collect wrong words typed
            missing_words.append(word)  # Collect missing words from original text
    
    # Collect any extra words typed by the user that don't belong in the original sentence
    extra_words = typed_words[len(original_words):]

    return incorrect_words, wrong_words, missing_words, extra_words

# Function to start the typing test
def start_test():
    global start_time, original_text
    
    # Randomly select a sentence from the sample sentences
    original_text = random.choice(sample_sentences)
    
    # Display the original sentence in the label
    sentence_label.config(text=f"Type the following sentence:\n\n{original_text}")
    
    # Clear the typing field
    typing_entry.delete(0, tk.END)
    
    # Enable the typing entry field and start button
    typing_entry.config(state=tk.NORMAL)
    start_button.config(state=tk.DISABLED)
    
    # Record the start time
    start_time = time.time()

# Function to submit the typed text and calculate results
def submit_text():
    global start_time, original_text
    
    # Get the typed text
    typed_text = typing_entry.get()
    
    # Record the end time
    end_time = time.time()
    
    # Calculate WPM and time taken
    time_taken, wpm = calculate_wpm(start_time, end_time, typed_text)
    
    # Check the accuracy and errors
    incorrect_words, wrong_words, missing_words, extra_words = check_accuracy_and_errors(original_text, typed_text)
    
    # Calculate accuracy percentage
    accuracy = 100 * (1 - incorrect_words / len(original_text.split())) if original_text else 100
    
    # Display the results in a message box
    result_message = f"Time taken: {time_taken:.2f} seconds\n"
    result_message += f"Words per minute (WPM): {wpm:.2f}\n"
    result_message += f"Accuracy: {accuracy:.2f}%\n"
    result_message += f"\nNumber of incorrect words: {incorrect_words}\n"
    result_message += f"Wrong words typed: {', '.join(wrong_words) if wrong_words else 'None'}\n"
    result_message += f"\nMissing words: {', '.join(missing_words) if missing_words else 'None'}\n"
    
    if extra_words:
        result_message += f"\nExtra words typed (not in the sentence): {', '.join(extra_words)}\n"
    
    # Display the results in a messagebox
    messagebox.showinfo("Typing Test Results", result_message)
    
    # Reset the interface for a new test
    typing_entry.config(state=tk.DISABLED)
    start_button.config(state=tk.NORMAL)

# Function to display instructions
def show_instructions():
    instructions = (
        "Welcome to the Typing Speed Test Game!\n\n"
        "Instructions:\n"
        "1. You will be given a sentence to type.\n"
        "2. Try to type the sentence as quickly and accurately as possible.\n"
        "3. Once you finish typing, click 'Submit'.\n"
        "4. Your typing speed (WPM) and accuracy will be displayed."
    )
    messagebox.showinfo("Instructions", instructions)

# Setting up the main window
root = tk.Tk()
root.title("Typing Speed Test")
root.geometry("600x400")

# Label to display instructions or the sentence to type
sentence_label = tk.Label(root, text="Press 'Start' to begin", font=("Helvetica", 14), wraplength=550, justify="center")
sentence_label.pack(pady=20)

# Entry widget for typing
typing_entry = tk.Entry(root, font=("Helvetica", 14), width=50, state=tk.DISABLED)
typing_entry.pack(pady=10)

# Button to start the test
start_button = tk.Button(root, text="Start Test", font=("Helvetica", 14), command=start_test)
start_button.pack(pady=10)

# Button to submit the typed text and calculate results
submit_button = tk.Button(root, text="Submit", font=("Helvetica", 14), command=submit_text, state=tk.DISABLED)
submit_button.pack(pady=10)

# Button to display instructions
instructions_button = tk.Button(root, text="Instructions", font=("Helvetica", 12), command=show_instructions)
instructions_button.pack(pady=10)

# Start the Tkinter event loop
root.mainloop()
